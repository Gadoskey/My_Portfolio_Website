import { NextApiRequest, NextApiResponse } from "next";
import axios from "axios";

interface OpenAIResponse {
  choices: { message: { content: string } }[];
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  const { text } = req.body;
  if (!text) return res.status(400).json({ error: "No text provided" });

  const apiKey = process.env.AZURE_OPENAI_KEY;
  const endpoint = process.env.AZURE_OPENAI_ENDPOINT;
  const deploymentName = "gpt-35-turbo";

  try {
    const response = await axios.post<OpenAIResponse>(
      `${endpoint}/openai/deployments/${deploymentName}/chat/completions?api-version=2023-05-15`,
      {
        messages: [{ role: "system", content: "Summarize this: " + text }],
        max_tokens: 300,
      },
      {
        headers: { "Content-Type": "application/json", "api-key": apiKey },
      }
    );

    res.status(200).json({ summary: response.data.choices[0].message.content });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Failed to summarize text" });
  }
}




"use client";
import { useState } from "react";

export default function Summarizer() {
  const [text, setText] = useState<string>("");
  const [summary, setSummary] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>("");

  async function handleSummarize() {
    setLoading(true);
    setError("");
    setSummary("");

    try {
      const response = await fetch("/api/summarize", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
      });

      const data = await response.json();
      if (data.summary) {
        setSummary(data.summary);
      } else {
        setError("Failed to generate summary.");
      }
    } catch (err) {
      setError("Something went wrong.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="p-4 max-w-lg mx-auto bg-gray-100 rounded-lg shadow-lg">
      <h2 className="text-xl font-bold mb-2">Text Summarizer</h2>

      {summary && (
        <div className="p-3 mb-3 bg-green-100 text-green-900 rounded-lg">
          <strong>Summary:</strong> {summary}
        </div>
      )}

      <textarea
        className="w-full p-2 border rounded-lg"
        rows={4}
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Enter text to summarize..."
      />

      <button
        onClick={handleSummarize}
        className="w-full mt-2 p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        disabled={loading || !text}
      >
        {loading ? "Summarizing..." : "Summarize"}
      </button>

      {error && <p className="text-red-600 mt-2">{error}</p>}
    </div>
  );
}



import Summarizer from "@/components/Summarizer";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <Summarizer />
    </div>
  );
}
